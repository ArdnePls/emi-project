const Listing = require('../../db/models').Listing;
const models = require('../../db/models');
const constants = require('../config/constants');
const { difference } = require('lodash');

const selectQuery = (where = false) => {
  const select = `
    SELECT
      "Subsidiary"."id" as "subsidiaryId",
      "Country"."name" as "countryName",
      "Country"."code" as "countryCode",
      COALESCE("Subsidiary"."name", "Company"."name") as "subsidiaryName",
      COALESCE("Subsidiary"."logo", "Company"."logo") as "subsidiaryLogo",
      "Listing"."id",
      "Listing".company_name as "companyName",
      "Listing".company_logo as "companyLogo",
      "Listing"."name",
      "Listing"."description",
      "Listing"."criteria",
      "Listing"."info",
      "Listing"."state",
      "Listing"."gs",
      COALESCE("PlatformListing".platform_listings, 0)::int as "platformListings"

      FROM
        listings AS "Listing"
        LEFT OUTER JOIN subsidiaries AS "Subsidiary" ON "Listing".subsidiary_id = "Subsidiary"."id"
        LEFT OUTER JOIN countries AS "Country" ON "Subsidiary".country_id = "Country"."id"
        LEFT OUTER JOIN companies AS "Company" ON "Subsidiary".company_id = "Company"."id"
      LEFT OUTER JOIN (
        SELECT l.listing_id as "lid", count(*) as platform_listings FROM platform_listings as l
        WHERE l."state" = 'ACTIVE'
      GROUP BY lid) AS "PlatformListing" ON "Listing"."id" = "PlatformListing"."lid"
    `
  return where ?
    (select + where) :
    select
}

const selectStepsQuery = () => {
  const select = `
      SELECT
        "Step"."id",
        "Step"."name",
        "Step"."step",
        'FLOW' as "type",
        "Flow"."id" as "flowId",
        "Flow"."name" as "flowName"
      FROM
        steps as "Step"
        LEFT OUTER JOIN flows as "Flow" ON "Flow"."id" = "Step"."flow_id"
      WHERE
        "Step".listing_id = ?
  `
  return select;
};

const validateListing = (listing, decoded) => {
  if (!listing) {
    return ({
      status: 404,
      message: 'Listing Not Found',
    })
  }
  if (listing.subsidiaryId != decoded.user.subsidiaryId && !decoded.authorities.includes(constants.ROLE_EMPLOYEE)) {
    return ({
      status: 403,
      message: 'Listing Not Found',
    })
  }
};

const updateListing = (body, listing) => ({
  companyName: body.companyName || listing.companyName,
  companyLogo: body.companyLogo || listing.companyLogo,
  name: body.name || listing.name,
  description: body.description || listing.description,
  info: body.info || listing.info,
  state: body.state || listing.state,
  gs: body.gs || listing.gs,
  criteria: body.criteria || listing.criteria,
});

const createBulk = async (newSteps, listingId, stepsToDelete) => {
  const bulkCreate = [];
  newSteps.forEach(({ id, flowId, name, step }) => {
    if (id < 0) {
      bulkCreate.push({
        listingId,
        flowId,
        name,
        step,
      })
    }
  })
  if (bulkCreate.length > 0)
    await models.Step.bulkCreate(bulkCreate);
  return models.Step.destroy({
    where: {
      id: stepsToDelete
    }
  });
};

const updateSteps = (changes) =>
  models.sequelize.Promise.each(changes, (val, index) =>
    models.Step.update(
      {
        name: val.name,
        step: val.step,
        flowId: val.flowId
      }, {
      where: {
        id: val.id
      }
    })
  );

const obtainListingsById = (listing) => {
  const requirements = { type: models.sequelize.QueryTypes.SELECT }
  const query = selectQuery(`
  WHERE
    "Listing"."id" = ?
  `);
  requirements.replacements = [listing.id];
  return models.sequelize.query(query, requirements)
};

const obtainChangesAndNewSteps = clientSteps => 
  clientSteps.reduce(([changes, newSteps], id) => {
    if (id > 0) return [[...changes, id], newSteps];
    if (id < 0) return [changes, [...newSteps, id]];
    return [changes, newSteps]
  }, [[], []]);

const update = (req, res) =>
  (!req.decoded || !req.decoded.user) ?
    res.status(400).send({ message: 'User Not Found' }) :
    Listing
      .findById(req.params.listingId)
      .then(listing => {
        const { body, decoded } = req;
        const { message, status } = validateListing(listing, decoded);
        return message ?
          res.status(status).send({ message }) :
          listing
            .update(updateListing(body, listing))
            .then((listing) =>
              models.Step.findAll({
                where: {
                  listingId: listing.id
                }
              })
                .then((steps) => {
                  const clientSteps = body.steps.map(({ id }) => id);
                  const [changes, newSteps] = obtainChangesAndNewSteps(clientSteps);
                  const stepsToDelete = difference(steps.map(step => step.id), clientSteps);
                  return createBulk(newSteps, listing.id, stepsToDelete)
                    .then(() =>
                      updateSteps(changes)
                        .then(() =>
                          obtainListingsById(listing)
                            .then((listings) => res.status(200).send(listings[0])))
                        .catch((error) => {
                          console.log(error)
                          res.status(400).send(error)
                        }))
                }))
      });

module.exports = { update };
